// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace AspNetCoreAssessment.Entities
{
    public partial class AspnetcoreassessmentContext : DbContext
    {
        public AspnetcoreassessmentContext()
        {
        }

        public AspnetcoreassessmentContext(DbContextOptions<AspnetcoreassessmentContext> options)
            : base(options)
        {
        }

        public virtual DbSet<DocumentFiles> DocumentFiles { get; set; }
        public virtual DbSet<Documents> Documents { get; set; }
        public virtual DbSet<Priorities> Priorities { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DocumentFiles>(entity =>
            {
                entity.HasKey(e => e.FileId);

                entity.ToTable("Document_files");

                entity.Property(e => e.FileId).HasColumnName("File_ID");

                entity.Property(e => e.DocumentId).HasColumnName("Document_ID");

                entity.Property(e => e.FilePath)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("File_path");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.DocumentFiles)
                    .HasForeignKey(d => d.DocumentId)
                    .HasConstraintName("FK_Document_files_Documents");
            });

            modelBuilder.Entity<Documents>(entity =>
            {
                entity.HasKey(e => e.DocumentId);

                entity.Property(e => e.DocumentId).HasColumnName("Document_ID");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.PriorityNavigation)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.Priority)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Documents_Priorities");
            });

            modelBuilder.Entity<Priorities>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}